# Main Application Configuration
server:
  port: 8080
  servlet:
    context-path: /api/v1
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: fraudguard-backend
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/fraudguard_db
    username: ${DB_USERNAME:fraudguard_user}
    password: ${DB_PASSWORD:fraudguard_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
    open-in-view: false

  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    jedis:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 1000ms

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
    consumer:
      group-id: fraudguard-backend
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "com.fraudguard.model"

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth/realms/fraudguard}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/auth/realms/fraudguard/protocol/openid-connect/certs}

  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 15MB

# Logging Configuration
logging:
  level:
    com.fraudguard: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/fraudguard-backend.log
    max-size: 10MB
    max-history: 30

# Management & Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# FraudGuard Specific Configuration
fraudguard:
  ml-service:
    base-url: ${ML_SERVICE_URL:http://localhost:5000}
    timeout: 30000
    retry-attempts: 3
    
  fraud-detection:
    score-threshold: 0.7
    high-risk-threshold: 0.9
    auto-block-threshold: 0.95
    batch-processing-size: 1000
    
  alerts:
    email:
      enabled: true
      smtp-host: ${SMTP_HOST:localhost}
      smtp-port: ${SMTP_PORT:587}
      username: ${SMTP_USERNAME:}
      password: ${SMTP_PASSWORD:}
      from: ${ALERT_EMAIL_FROM:alerts@fraudguard.com}
    webhook:
      enabled: true
      timeout: 5000
      retry-attempts: 3
      
  rate-limit:
    enabled: true
    requests-per-minute: 1000
    burst-capacity: 2000

# Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5432/fraudguard_dev
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

logging:
  level:
    root: INFO
    com.fraudguard: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    hikari:
      maximum-pool-size: 50
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    root: WARN
    com.fraudguard: INFO

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true

logging:
  level:
    root: WARN
    com.fraudguard: DEBUG
